/* Generated By:JJTree: Do not edit this line. ExpressionParserTree.h Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#ifndef EXPRESSIONPARSERTREE_H
#define EXPRESSIONPARSERTREE_H
#include <vector>
#include "JavaCC.h"
#include "Token.h"
#include "Node.h"
#include "ExpressionParserTreeConstants.h"


class SimpleNode : public Node {

  protected: Node *parent;
  protected: std::vector<Node*> children;
  protected: int id;
  protected: void * value;
  protected: ExpressionParser *parser;
  //protected: int numChildren;
  protected: Token *firstToken;
  protected: Token *lastToken;

  public: SimpleNode(int i);
  public: SimpleNode(ExpressionParser *p, int i);

//#if !NODE_FACTORY
//\#define jjtCreate(id) new SimpleNode(id)
//\#define jjtCreate(p, id) new SimpleNode(p, id)
//#fi

  public: virtual void jjtOpen() const;
  public: virtual void jjtClose() const;
  public: virtual void jjtSetParent(Node *n);
  public: virtual Node *jjtGetParent() const;
  public: virtual void jjtAddChild(Node *n, int i);
  public: virtual Node *jjtGetChild(int i) const;
  public: virtual int jjtGetNumChildren() const;
  public: virtual void jjtSetValue(void * value);
  public: virtual void * jjtGetValue() const;

  public: virtual Token *jjtGetFirstToken() const;
  public: virtual void jjtSetFirstToken(Token token);
  public: virtual Token *jjtGetLastToken() const;
  public: virtual void jjtSetLastToken(Token token);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const;

  /** Accept the visitor. **/
  public: virtual void childrenAccept(ExpressionParserVisitor *visitor, void * data) const;
  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(string), otherwise overriding toString() is probably all
     you need to do. */

  public: virtual JAVACC_STRING_TYPE toString() const;
  public: virtual JAVACC_STRING_TYPE toString(JAVACC_STRING_TYPE prefix) const;

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public: virtual void dump(JAVACC_STRING_TYPE prefix) const;
  public: virtual void dumpToBuffer(JAVACC_STRING_TYPE prefix, JAVACC_STRING_TYPE separator, JAVACC_STRING_TYPE *sb) const;
  public: virtual ~SimpleNode();
  public: virtual int getId() const {
    return id;
  }
};
class ASTLogicalOrExpression : public SimpleNode {
  public: ASTLogicalOrExpression(int id);
  public: ASTLogicalOrExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalOrExpression();
};
class ASTLogicalAndExpression : public SimpleNode {
  public: ASTLogicalAndExpression(int id);
  public: ASTLogicalAndExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalAndExpression();
};
class ASTStart : public SimpleNode {
  public: ASTStart(int id);
  public: ASTStart(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTStart();
};
class ASTLogicalNotExpression : public SimpleNode {
  public: ASTLogicalNotExpression(int id);
  public: ASTLogicalNotExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalNotExpression();
};
class ASTAddNode : public SimpleNode {
  public: ASTAddNode(int id);
  public: ASTAddNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTAddNode();
};
class ASTBitwiseAndExpression : public SimpleNode {
  public: ASTBitwiseAndExpression(int id);
  public: ASTBitwiseAndExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseAndExpression();
};
class ASTConditionalNode : public SimpleNode {
  public: ASTConditionalNode(int id);
  public: ASTConditionalNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTConditionalNode();
};
class ASTUnaryNode : public SimpleNode {
  public: ASTUnaryNode(int id);
  public: ASTUnaryNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTUnaryNode();
};
class ASTMulNode : public SimpleNode {
  public: ASTMulNode(int id);
  public: ASTMulNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTMulNode();
};
class ASTLogicalAndNode : public SimpleNode {
  public: ASTLogicalAndNode(int id);
  public: ASTLogicalAndNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalAndNode();
};
class ASTBitwiseNotNode : public SimpleNode {
  public: ASTBitwiseNotNode(int id);
  public: ASTBitwiseNotNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseNotNode();
};
class ASTGTNode : public SimpleNode {
  public: ASTGTNode(int id);
  public: ASTGTNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTGTNode();
};
class ASTExpression : public SimpleNode {
  public: ASTExpression(int id);
  public: ASTExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTExpression();
};
class ASTLogicalOrNode : public SimpleNode {
  public: ASTLogicalOrNode(int id);
  public: ASTLogicalOrNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalOrNode();
};
class ASTLongConstNode : public SimpleNode {
  public: ASTLongConstNode(int id);
  public: ASTLongConstNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLongConstNode();
};
class ASTBitwiseNotExpression : public SimpleNode {
  public: ASTBitwiseNotExpression(int id);
  public: ASTBitwiseNotExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseNotExpression();
};
class ASTGENode : public SimpleNode {
  public: ASTGENode(int id);
  public: ASTGENode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTGENode();
};
class ASTBitwiseXorNode : public SimpleNode {
  public: ASTBitwiseXorNode(int id);
  public: ASTBitwiseXorNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseXorNode();
};
class ASTBitwiseOrNode : public SimpleNode {
  public: ASTBitwiseOrNode(int id);
  public: ASTBitwiseOrNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseOrNode();
};
class ASTEQNode : public SimpleNode {
  public: ASTEQNode(int id);
  public: ASTEQNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTEQNode();
};
class ASTskip_to_matching_brace : public SimpleNode {
  public: ASTskip_to_matching_brace(int id);
  public: ASTskip_to_matching_brace(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTskip_to_matching_brace();
};
class ASTRegexMatchNode : public SimpleNode {
  public: ASTRegexMatchNode(int id);
  public: ASTRegexMatchNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTRegexMatchNode();
};
class ASTFalseNode : public SimpleNode {
  public: ASTFalseNode(int id);
  public: ASTFalseNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTFalseNode();
};
class ASTNENode : public SimpleNode {
  public: ASTNENode(int id);
  public: ASTNENode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTNENode();
};
class ASTTrueNode : public SimpleNode {
  public: ASTTrueNode(int id);
  public: ASTTrueNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTTrueNode();
};
class ASTUnaryExpression : public SimpleNode {
  public: ASTUnaryExpression(int id);
  public: ASTUnaryExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTUnaryExpression();
};
class ASTLTNode : public SimpleNode {
  public: ASTLTNode(int id);
  public: ASTLTNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLTNode();
};
class ASTDivNode : public SimpleNode {
  public: ASTDivNode(int id);
  public: ASTDivNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTDivNode();
};
class ASTStringConstNode : public SimpleNode {
  public: ASTStringConstNode(int id);
  public: ASTStringConstNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTStringConstNode();
};
class ASTLogicalNotNode : public SimpleNode {
  public: ASTLogicalNotNode(int id);
  public: ASTLogicalNotNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLogicalNotNode();
};
class ASTBitwiseOrExpression : public SimpleNode {
  public: ASTBitwiseOrExpression(int id);
  public: ASTBitwiseOrExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseOrExpression();
};
class ASTLENode : public SimpleNode {
  public: ASTLENode(int id);
  public: ASTLENode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLENode();
};
class ASTBitwiseXorExpression : public SimpleNode {
  public: ASTBitwiseXorExpression(int id);
  public: ASTBitwiseXorExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseXorExpression();
};
class ASTModNode : public SimpleNode {
  public: ASTModNode(int id);
  public: ASTModNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTModNode();
};
class ASTUnsignedRightShiftNode : public SimpleNode {
  public: ASTUnsignedRightShiftNode(int id);
  public: ASTUnsignedRightShiftNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTUnsignedRightShiftNode();
};
class ASTBitwiseAndNode : public SimpleNode {
  public: ASTBitwiseAndNode(int id);
  public: ASTBitwiseAndNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTBitwiseAndNode();
};
class ASTConditionalExpression : public SimpleNode {
  public: ASTConditionalExpression(int id);
  public: ASTConditionalExpression(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTConditionalExpression();
};
class ASTNullNode : public SimpleNode {
  public: ASTNullNode(int id);
  public: ASTNullNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTNullNode();
};
class ASTValueReferenceNode : public SimpleNode {
  public: ASTValueReferenceNode(int id);
  public: ASTValueReferenceNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTValueReferenceNode();
};
class ASTFunctionNode : public SimpleNode {
  public: ASTFunctionNode(int id);
  public: ASTFunctionNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTFunctionNode();
};
class ASTSubtractNode : public SimpleNode {
  public: ASTSubtractNode(int id);
  public: ASTSubtractNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTSubtractNode();
};
class ASTRightShiftNode : public SimpleNode {
  public: ASTRightShiftNode(int id);
  public: ASTRightShiftNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTRightShiftNode();
};
class ASTFloatConstNode : public SimpleNode {
  public: ASTFloatConstNode(int id);
  public: ASTFloatConstNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTFloatConstNode();
};
class ASTLeftShiftNode : public SimpleNode {
  public: ASTLeftShiftNode(int id);
  public: ASTLeftShiftNode(ExpressionParser *p, int id);

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const ;
  public: virtual ~ASTLeftShiftNode();
};
#endif 
/* JavaCC - OriginalChecksum=c0e515a87f4de0aa4470741232c2d71c (do not edit this line) */
