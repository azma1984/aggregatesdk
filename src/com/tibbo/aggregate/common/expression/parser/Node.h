/* Generated By:JJTree: Do not edit this line. Node.h Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#ifndef NODE_H
#define NODE_H

#include <vector>
#include "JavaCC.h"
#include "Token.h"


/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

class ExpressionParser;
class ExpressionParserVisitor;
class Node {

  /** This method is called after the node has been made the current
    node.  It indicates that child nodes can now be added to it. */
  public: virtual void jjtOpen() const = 0;

  /** This method is called after all the child nodes have been
    added. */
  public: virtual void jjtClose() const = 0;

  /** This pair of methods are used to inform the node of its
    parent. */
  public: virtual void jjtSetParent(Node *n) = 0;
  public: virtual Node *jjtGetParent() const = 0;

  /** This method tells the node to add its argument to the node's
    list of children.  */
  public: virtual void jjtAddChild(Node *n, int i) = 0;

  /** This method returns a child node.  The children are numbered
     from zero, left to right. */
  public: virtual Node *jjtGetChild(int i) const = 0;

  /** Return the number of children the node has. */
  public: virtual int jjtGetNumChildren() const = 0;
  public: virtual int getId() const = 0;

  /** Accept the visitor. **/
  public: virtual void  jjtAccept(ExpressionParserVisitor *visitor, void * data) const = 0;
  public: virtual ~Node() { }
};


#endif
/* JavaCC - OriginalChecksum=846c8bec56e5535aa0107964ff93624e (do not edit this line) */
