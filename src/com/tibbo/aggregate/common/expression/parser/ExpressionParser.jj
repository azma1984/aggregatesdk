/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ExpressionParser.jj */
/*@egen*/
options {
                 
             
               
                           
                       
                    

  JAVA_UNICODE_ESCAPE = true;
  OUTPUT_LANGUAGE = "c++";
//  NAMESPACE = "adder_parser";
//  OUTPUT_DIRECTORY = "gen";
}

PARSER_BEGIN(ExpressionParser)

//package com.tibbo.aggregate.common.expression.parser;

class ExpressionParser {
}

string skip_to_matching_brace() : 
{
	string res = "";
	Token* tok;
	int nesting = 1;  
	while (true) {
	tok = getToken(1);
	if (tok.kind == EOF) break;
	if (tok.kind == LBRACE) nesting++;
	if (tok.kind == RBRACE) {
	  nesting--;
	  if (nesting == 0) break;
	}
	if (tok.kind == STRING_LITERAL) {
	  res += tok.image.replace("\\\\", "\\");
	}
	else
	{
	  res += tok.image;
	}
	tok = getNextToken();
  }

  return res;
}

PARSER_END(ExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : { <SINGLE_LINE_COMMENT:  (~["\r","\n","\u001a"])* ("\r"|"\n"|"\r\n")? > : DEFAULT }

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}


TOKEN [IGNORE_CASE] :
{
  < OR: "||" >
|
  < AND: "&&" >
|
  < NOT: "!" >
|
  < BITWISE_OR: "|" >
|
  < BITWISE_XOR: "^" >
|
  < BITWISE_AND: "&" >
|
  < BITWISE_NOT: "~" >
|
  < TRUE: "TRUE" >
|
  < FALSE: "FALSE" >
|
  < NULL: "NULL" >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
      | <BINARY_LITERAL>
  >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < #BINARY_LITERAL: "0" ["b","B"] (["0"-"1"])+ >
|
  < FLOATING_POINT_LITERAL:
      (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < STRING_LITERAL:
      (
      "\""
      (   
        (~["\"","\\","\n","\r","\t","\f","\b"])
        | ("\\" ( ["\\","'","\"","n","r","t","f","b"]) )
        | ("\\" "u" (["0"-"9","a"-"f","A"-"F"]){4} )
      )*
      "\""
      ) | (
      "'"
      (
        (~["'","\\","\n","\r","\t","\f","\b"])
        | ("\\" ( ["\\","'","\"","n","r","t","f","b"]) )
        | ("\\" "u" (["0"-"9","a"-"f","A"-"F"]){4} )
      )*
      "'"
      )
  >
}

TOKEN : /* OPERATORS */
{
  < PLUS: "+">
|
  < MINUS: "-">
|
  < MUL: "*">
|
  < DIV: "/">
|
  < MOD: "%">
|
  < QUESTION: "?">
|
  < COLON: ":">
|
  < COMMA: ",">
|
  < EQ: "==">
|
  < NE: "!=">
|
  < MATCH: "~=">
|
  < LT: "<">
|
  < GT: ">">
|
  < LTE: "<=">
|
  < GTE: ">=">
|
  < LBRAKET: "(">
|
  < RBRAKET: ")">
|
  < LBRACE: "{">
|
  < RBRACE: "}" >
|
  < RIGHT_SHIFT: ">>" >
|
  < URIGHT_SHIFT: ">>>" >
|
  < LEFT_SHIFT: "<<" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < URICHAR: <LETTER> | <DIGIT> | ["/","\\","%","?",":",";","@","=","#","&","+","$",",","-",".","!","~","*","'","(",")","[","]","}"]>
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

string skip_to_matching_brace() : {/*@bgen(jjtree) skip_to_matching_brace */
  ASTskip_to_matching_brace *jjtn000 = new ASTskip_to_matching_brace(JJTSKIP_TO_MATCHING_BRACE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) skip_to_matching_brace */
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{return "";}/*@bgen(jjtree)*/
        } catch (...) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
        } {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart *jjtn000 = new ASTStart(JJTSTART);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  ( Expression() )? <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Expression() : {/*@bgen(jjtree) Expression */
  ASTExpression *jjtn000 = new ASTExpression(JJTEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  ConditionalExpression()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ConditionalExpression() : {/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression *jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ConditionalExpression */
  try {
/*@egen*/
  LogicalOrExpression() ( <QUESTION> LogicalOrExpression() <COLON>/*@bgen(jjtree) #ConditionalNode( 3) */
                                                                   {
                                                                     ASTConditionalNode *jjtn001 = new ASTConditionalNode(JJTCONDITIONALNODE);
                                                                     bool jjtc001 = true;
                                                                     jjtree.openNodeScope(jjtn001);
                                                                     jjtn001.jjtSetFirstToken(getToken(1));
                                                                   }
                                                                   try {
/*@egen*/ ConditionalExpression()/*@bgen(jjtree)*/
                                                                   } catch (...) {
                                                                     if (jjtc001) {
                                                                       jjtree.clearNodeScope(jjtn001);
                                                                       jjtc001 = false;
                                                                     } else {
                                                                       jjtree.popNode();
                                                                     }
                                                                   } {
                                                                     if (jjtc001) {
                                                                       jjtree.closeNodeScope(jjtn001,  3);
                                                                       jjtn001.jjtSetLastToken(getToken(0));
                                                                     }
                                                                   }
/*@egen*/                     )?/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void LogicalOrExpression() : {/*@bgen(jjtree) LogicalOrExpression */
  ASTLogicalOrExpression *jjtn000 = new ASTLogicalOrExpression(JJTLOGICALOREXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LogicalOrExpression */
  try {
/*@egen*/
  LogicalAndExpression() ( <OR>/*@bgen(jjtree) #LogicalOrNode( 2) */
                                {
                                  ASTLogicalOrNode *jjtn001 = new ASTLogicalOrNode(JJTLOGICALORNODE);
                                  bool jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ LogicalAndExpression()/*@bgen(jjtree)*/
                                } catch (...) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                } {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/                   )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void LogicalAndExpression() : {/*@bgen(jjtree) LogicalAndExpression */
  ASTLogicalAndExpression *jjtn000 = new ASTLogicalAndExpression(JJTLOGICALANDEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LogicalAndExpression */
  try {
/*@egen*/
  BitwiseOrExpression() ( <AND>/*@bgen(jjtree) #LogicalAndNode( 2) */
                                {
                                  ASTLogicalAndNode *jjtn001 = new ASTLogicalAndNode(JJTLOGICALANDNODE);
                                  bool jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/ BitwiseOrExpression()/*@bgen(jjtree)*/
                                } catch (...) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                } {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/                     )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void BitwiseOrExpression() : {/*@bgen(jjtree) BitwiseOrExpression */
  ASTBitwiseOrExpression *jjtn000 = new ASTBitwiseOrExpression(JJTBITWISEOREXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BitwiseOrExpression */
  try {
/*@egen*/
  BitwiseXorExpression() ( <BITWISE_OR>/*@bgen(jjtree) #BitwiseOrNode( 2) */
                                        {
                                          ASTBitwiseOrNode *jjtn001 = new ASTBitwiseOrNode(JJTBITWISEORNODE);
                                          bool jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                          jjtn001.jjtSetFirstToken(getToken(1));
                                        }
                                        try {
/*@egen*/ BitwiseXorExpression()/*@bgen(jjtree)*/
                                        } catch (...) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                        } {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  2);
                                            jjtn001.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/                   )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void BitwiseXorExpression() : {/*@bgen(jjtree) BitwiseXorExpression */
  ASTBitwiseXorExpression *jjtn000 = new ASTBitwiseXorExpression(JJTBITWISEXOREXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BitwiseXorExpression */
  try {
/*@egen*/
  BitwiseAndExpression() ( <BITWISE_XOR>/*@bgen(jjtree) #BitwiseXorNode( 2) */
                                         {
                                           ASTBitwiseXorNode *jjtn001 = new ASTBitwiseXorNode(JJTBITWISEXORNODE);
                                           bool jjtc001 = true;
                                           jjtree.openNodeScope(jjtn001);
                                           jjtn001.jjtSetFirstToken(getToken(1));
                                         }
                                         try {
/*@egen*/ BitwiseAndExpression()/*@bgen(jjtree)*/
                                         } catch (...) {
                                           if (jjtc001) {
                                             jjtree.clearNodeScope(jjtn001);
                                             jjtc001 = false;
                                           } else {
                                             jjtree.popNode();
                                           }
                                         } {
                                           if (jjtc001) {
                                             jjtree.closeNodeScope(jjtn001,  2);
                                             jjtn001.jjtSetLastToken(getToken(0));
                                           }
                                         }
/*@egen*/                    )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void BitwiseAndExpression() : {/*@bgen(jjtree) BitwiseAndExpression */
  ASTBitwiseAndExpression *jjtn000 = new ASTBitwiseAndExpression(JJTBITWISEANDEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BitwiseAndExpression */
  try {
/*@egen*/
  EqualityExpression() ( <BITWISE_AND>/*@bgen(jjtree) #BitwiseAndNode( 2) */
                                       {
                                         ASTBitwiseAndNode *jjtn001 = new ASTBitwiseAndNode(JJTBITWISEANDNODE);
                                         bool jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                         jjtn001.jjtSetFirstToken(getToken(1));
                                       }
                                       try {
/*@egen*/ EqualityExpression()/*@bgen(jjtree)*/
                                       } catch (...) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                       } {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                           jjtn001.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/                    )*/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void EqualityExpression()       :
{}
{
  RelationalExpression()
  (
     <EQ>/*@bgen(jjtree) #EQNode( 2) */
          {
            ASTEQNode *jjtn001 = new ASTEQNode(JJTEQNODE);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
   |
     <NE>/*@bgen(jjtree) #NENode( 2) */
          {
            ASTNENode *jjtn002 = new ASTNENode(JJTNENODE);
            bool jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
   |
     <MATCH>/*@bgen(jjtree) #RegexMatchNode( 2) */
             {
               ASTRegexMatchNode *jjtn003 = new ASTRegexMatchNode(JJTREGEXMATCHNODE);
               bool jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
               jjtn003.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ RelationalExpression()/*@bgen(jjtree)*/
             } catch (...) {
               if (jjtc003) {
                 jjtree.clearNodeScope(jjtn003);
                 jjtc003 = false;
               } else {
                 jjtree.popNode();
               }
             } {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003,  2);
                 jjtn003.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/                   
  )*
}
void RelationalExpression()       :
{}
{
  ShiftExpression()
  (
    <LT>/*@bgen(jjtree) #LTNode( 2) */
         {
           ASTLTNode *jjtn001 = new ASTLTNode(JJTLTNODE);
           bool jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
         } catch (...) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
         } {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/           
   |
    <GT>/*@bgen(jjtree) #GTNode( 2) */
         {
           ASTGTNode *jjtn002 = new ASTGTNode(JJTGTNODE);
           bool jjtc002 = true;
           jjtree.openNodeScope(jjtn002);
           jjtn002.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
         } catch (...) {
           if (jjtc002) {
             jjtree.clearNodeScope(jjtn002);
             jjtc002 = false;
           } else {
             jjtree.popNode();
           }
         } {
           if (jjtc002) {
             jjtree.closeNodeScope(jjtn002,  2);
             jjtn002.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/           
   |
    <LTE>/*@bgen(jjtree) #LENode( 2) */
          {
            ASTLENode *jjtn003 = new ASTLENode(JJTLENODE);
            bool jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
   |
    <GTE>/*@bgen(jjtree) #GENode( 2) */
          {
            ASTGENode *jjtn004 = new ASTGENode(JJTGENODE);
            bool jjtc004 = true;
            jjtree.openNodeScope(jjtn004);
            jjtn004.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ ShiftExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc004) {
              jjtree.clearNodeScope(jjtn004);
              jjtc004 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc004) {
              jjtree.closeNodeScope(jjtn004,  2);
              jjtn004.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/           
  )*
}

void ShiftExpression()       :
{}
{
  AdditiveExpression()
  (
    <RIGHT_SHIFT>/*@bgen(jjtree) #RightShiftNode( 2) */
                  {
                    ASTRightShiftNode *jjtn001 = new ASTRightShiftNode(JJTRIGHTSHIFTNODE);
                    bool jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                  } catch (...) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                  } {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  2);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                   
   |
    <URIGHT_SHIFT>/*@bgen(jjtree) #UnsignedRightShiftNode( 2) */
                   {
                     ASTUnsignedRightShiftNode *jjtn002 = new ASTUnsignedRightShiftNode(JJTUNSIGNEDRIGHTSHIFTNODE);
                     bool jjtc002 = true;
                     jjtree.openNodeScope(jjtn002);
                     jjtn002.jjtSetFirstToken(getToken(1));
                   }
                   try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                   } catch (...) {
                     if (jjtc002) {
                       jjtree.clearNodeScope(jjtn002);
                       jjtc002 = false;
                     } else {
                       jjtree.popNode();
                     }
                   } {
                     if (jjtc002) {
                       jjtree.closeNodeScope(jjtn002,  2);
                       jjtn002.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/                           
   |
    <LEFT_SHIFT>/*@bgen(jjtree) #LeftShiftNode( 2) */
                 {
                   ASTLeftShiftNode *jjtn003 = new ASTLeftShiftNode(JJTLEFTSHIFTNODE);
                   bool jjtc003 = true;
                   jjtree.openNodeScope(jjtn003);
                   jjtn003.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ AdditiveExpression()/*@bgen(jjtree)*/
                 } catch (...) {
                   if (jjtc003) {
                     jjtree.clearNodeScope(jjtn003);
                     jjtc003 = false;
                   } else {
                     jjtree.popNode();
                   }
                 } {
                   if (jjtc003) {
                     jjtree.closeNodeScope(jjtn003,  2);
                     jjtn003.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                  
  )*
}

void AdditiveExpression()       :
{}
{
  MultiplicativeExpression()
  (
    <PLUS>/*@bgen(jjtree) #AddNode( 2) */
           {
             ASTAddNode *jjtn001 = new ASTAddNode(JJTADDNODE);
             bool jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
           } catch (...) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
           } {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  2);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/            
   |
    <MINUS>/*@bgen(jjtree) #SubtractNode( 2) */
            {
              ASTSubtractNode *jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
              bool jjtc002 = true;
              jjtree.openNodeScope(jjtn002);
              jjtn002.jjtSetFirstToken(getToken(1));
            }
            try {
/*@egen*/ MultiplicativeExpression()/*@bgen(jjtree)*/
            } catch (...) {
              if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
              } else {
                jjtree.popNode();
              }
            } {
              if (jjtc002) {
                jjtree.closeNodeScope(jjtn002,  2);
                jjtn002.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/                 
  )*
}

void MultiplicativeExpression()       :
{}
{
  UnaryExpression()
  (
    <MUL>/*@bgen(jjtree) #MulNode( 2) */
          {
            ASTMulNode *jjtn001 = new ASTMulNode(JJTMULNODE);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  2);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/            
   |
    <DIV>/*@bgen(jjtree) #DivNode( 2) */
          {
            ASTDivNode *jjtn002 = new ASTDivNode(JJTDIVNODE);
            bool jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
            jjtn002.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002,  2);
              jjtn002.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/            
   |
    <MOD>/*@bgen(jjtree) #ModNode( 2) */
          {
            ASTModNode *jjtn003 = new ASTModNode(JJTMODNODE);
            bool jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ UnaryExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003,  2);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/            
  )*
}

void UnaryExpression() : {/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression *jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  <MINUS>/*@bgen(jjtree) #UnaryNode( 1) */
          {
            ASTUnaryNode *jjtn001 = new ASTUnaryNode(JJTUNARYNODE);
            bool jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/ LogicalNotExpression()/*@bgen(jjtree)*/
          } catch (...) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
          } {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  1);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/              
  |
  LogicalNotExpression()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void LogicalNotExpression() : {/*@bgen(jjtree) LogicalNotExpression */
  ASTLogicalNotExpression *jjtn000 = new ASTLogicalNotExpression(JJTLOGICALNOTEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) LogicalNotExpression */
  try {
/*@egen*/
  <NOT>/*@bgen(jjtree) #LogicalNotNode( 1) */
        {
          ASTLogicalNotNode *jjtn001 = new ASTLogicalNotNode(JJTLOGICALNOTNODE);
          bool jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ LogicalNotExpression()/*@bgen(jjtree)*/
        } catch (...) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
        } {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  1);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                   
  |
  BitwiseNotExpression()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void BitwiseNotExpression() : {/*@bgen(jjtree) BitwiseNotExpression */
  ASTBitwiseNotExpression *jjtn000 = new ASTBitwiseNotExpression(JJTBITWISENOTEXPRESSION);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) BitwiseNotExpression */
  try {
/*@egen*/
  <BITWISE_NOT>/*@bgen(jjtree) #BitwiseNotNode( 1) */
                {
                  ASTBitwiseNotNode *jjtn001 = new ASTBitwiseNotNode(JJTBITWISENOTNODE);
                  bool jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ BitwiseNotExpression()/*@bgen(jjtree)*/
                } catch (...) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                } {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                   
  |
  PrimaryExpression()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void PrimaryExpression()       :
{
   String name;
}
{
  <LBRACE> ValueReference() <RBRACE>
|
  Literal()
|
  Function()
|
  <LBRAKET> Expression() <RBRAKET>
}


void Function()               :
{
   Token t;/*@bgen(jjtree) FunctionNode */
  ASTFunctionNode *jjtn000 = new ASTFunctionNode(JJTFUNCTIONNODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) FunctionNode */
  try {
/*@egen*/
  t=<IDENTIFIER> Arguments()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       jjtn000.name = t.image;
    }/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/

}

void Arguments()       :
{}
{
  <LBRAKET> [ ArgumentList() ] <RBRAKET>
}

void ArgumentList()       :
{}
{
  Expression() ( <COMMA> Expression() )*
}

void ValueReference()                     :
{
   Token t;/*@bgen(jjtree) ValueReferenceNode */
  ASTValueReferenceNode *jjtn000 = new ASTValueReferenceNode(JJTVALUEREFERENCENODE);
  bool jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) ValueReferenceNode */
  try {
/*@egen*/
  jjtn000.uriImage = skip_to_matching_brace()/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void Literal()       :
{
   Token t;
}
{/*@bgen(jjtree) LongConstNode */
 {
   ASTLongConstNode *jjtn001 = new ASTLongConstNode(JJTLONGCONSTNODE);
   bool jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
   jjtn001.jjtSetFirstToken(getToken(1));
 }
 try {
/*@egen*/
 (
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn001, true);
      jjtc001 = false;
      jjtn001.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       if (t.image.startsWith("0x") || t.image.startsWith("0X"))
       {
         jjtn001.val = Long.parseLong(t.image.substring(2, t.image.length()), 16);
       }
       else if (t.image.startsWith("0b") || t.image.startsWith("0B"))
       {
         jjtn001.val = Long.parseLong(t.image.substring(2, t.image.length()), 2);
       }
       else if (t.image.startsWith("0") && t.image.length() > 1)
       {
         jjtn001.val = Long.parseLong(t.image.substring(1, t.image.length()), 8);
       }
       else
       {
         jjtn001.val = Long.parseLong(t.image);
       }
    }
 )/*@bgen(jjtree)*/
 } catch (...) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
 } {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
     jjtn001.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/               
|/*@bgen(jjtree) FloatConstNode */
 {
   ASTFloatConstNode *jjtn002 = new ASTFloatConstNode(JJTFLOATCONSTNODE);
   bool jjtc002 = true;
   jjtree.openNodeScope(jjtn002);
   jjtn002.jjtSetFirstToken(getToken(1));
 }
 try {
/*@egen*/
 (
  t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn002, true);
      jjtc002 = false;
      jjtn002.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       jjtn002.val = Float.parseFloat(t.image);
    }
 )/*@bgen(jjtree)*/
 } catch (...) {
   if (jjtc002) {
     jjtree.clearNodeScope(jjtn002);
     jjtc002 = false;
   } else {
     jjtree.popNode();
   }
 } {
   if (jjtc002) {
     jjtree.closeNodeScope(jjtn002, true);
     jjtn002.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/                
|/*@bgen(jjtree) StringConstNode */
 {
   ASTStringConstNode *jjtn003 = new ASTStringConstNode(JJTSTRINGCONSTNODE);
   bool jjtc003 = true;
   jjtree.openNodeScope(jjtn003);
   jjtn003.jjtSetFirstToken(getToken(1));
 }
 try {
/*@egen*/
 (
  t=<STRING_LITERAL>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn003, true);
      jjtc003 = false;
      jjtn003.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
       jjtn003.val = t.image.substring(1, t.image.length() - 1);
       
       jjtn003.val = org.apache.commons.lang.StringEscapeUtils.unescapeJava(jjtn003.val);
    }
 )/*@bgen(jjtree)*/
 } catch (...) {
   if (jjtc003) {
     jjtree.clearNodeScope(jjtn003);
     jjtc003 = false;
   } else {
     jjtree.popNode();
   }
 } {
   if (jjtc003) {
     jjtree.closeNodeScope(jjtn003, true);
     jjtn003.jjtSetLastToken(getToken(0));
   }
 }
/*@egen*/                 
|
  BooleanLiteral()
|/*@bgen(jjtree) NullNode */
  {
    ASTNullNode *jjtn004 = new ASTNullNode(JJTNULLNODE);
    bool jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtn004.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  <NULL>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc004) {
      jjtree.clearNodeScope(jjtn004);
      jjtc004 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004, true);
      jjtn004.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/          
}

void BooleanLiteral()       :
{}
{/*@bgen(jjtree) TrueNode */
  {
    ASTTrueNode *jjtn001 = new ASTTrueNode(JJTTRUENODE);
    bool jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtn001.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  <TRUE>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
      jjtn001.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/          
|/*@bgen(jjtree) FalseNode */
  {
    ASTFalseNode *jjtn002 = new ASTFalseNode(JJTFALSENODE);
    bool jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtn002.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/
  <FALSE>/*@bgen(jjtree)*/
  } catch (...) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
  } {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
      jjtn002.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/           
}