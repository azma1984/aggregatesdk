/* Generated By:JavaCC: Do not edit this line. ExpressionParserVisitor.h Version 6.0_1 */
#ifndef EXPRESSIONPARSERVISITOR_H
#define EXPRESSIONPARSERVISITOR_H

#include "JavaCC.h"
#include "ExpressionParserTree.h"
class ExpressionParserVisitor
{
  public: virtual void  visit(const SimpleNode *node, void * data) = 0;
  public: virtual void  visit(const ASTskip_to_matching_brace *node, void * data) = 0;
  public: virtual void  visit(const ASTStart *node, void * data) = 0;
  public: virtual void  visit(const ASTExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTConditionalExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTConditionalNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalOrExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalOrNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalAndExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalAndNode *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseOrExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseOrNode *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseXorExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseXorNode *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseAndExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseAndNode *node, void * data) = 0;
  public: virtual void  visit(const ASTEQNode *node, void * data) = 0;
  public: virtual void  visit(const ASTNENode *node, void * data) = 0;
  public: virtual void  visit(const ASTRegexMatchNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLTNode *node, void * data) = 0;
  public: virtual void  visit(const ASTGTNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLENode *node, void * data) = 0;
  public: virtual void  visit(const ASTGENode *node, void * data) = 0;
  public: virtual void  visit(const ASTRightShiftNode *node, void * data) = 0;
  public: virtual void  visit(const ASTUnsignedRightShiftNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLeftShiftNode *node, void * data) = 0;
  public: virtual void  visit(const ASTAddNode *node, void * data) = 0;
  public: virtual void  visit(const ASTSubtractNode *node, void * data) = 0;
  public: virtual void  visit(const ASTMulNode *node, void * data) = 0;
  public: virtual void  visit(const ASTDivNode *node, void * data) = 0;
  public: virtual void  visit(const ASTModNode *node, void * data) = 0;
  public: virtual void  visit(const ASTUnaryExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTUnaryNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalNotExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTLogicalNotNode *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseNotExpression *node, void * data) = 0;
  public: virtual void  visit(const ASTBitwiseNotNode *node, void * data) = 0;
  public: virtual void  visit(const ASTFunctionNode *node, void * data) = 0;
  public: virtual void  visit(const ASTValueReferenceNode *node, void * data) = 0;
  public: virtual void  visit(const ASTLongConstNode *node, void * data) = 0;
  public: virtual void  visit(const ASTFloatConstNode *node, void * data) = 0;
  public: virtual void  visit(const ASTStringConstNode *node, void * data) = 0;
  public: virtual void  visit(const ASTNullNode *node, void * data) = 0;
  public: virtual void  visit(const ASTTrueNode *node, void * data) = 0;
  public: virtual void  visit(const ASTFalseNode *node, void * data) = 0;
  public: virtual ~ExpressionParserVisitor() { }
};
class ExpressionParserDefaultVisitor : public ExpressionParserVisitor {
  public:
  virtual void  defaultVisit(const SimpleNode *node, void * data) = 0;
  virtual void  visit(const SimpleNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTskip_to_matching_brace *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTStart *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTConditionalExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTConditionalNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalOrExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalOrNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalAndExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalAndNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseOrExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseOrNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseXorExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseXorNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseAndExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseAndNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTEQNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTNENode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTRegexMatchNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLTNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTGTNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLENode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTGENode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTRightShiftNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTUnsignedRightShiftNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLeftShiftNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTAddNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTSubtractNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTMulNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTDivNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTModNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTUnaryExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTUnaryNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalNotExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLogicalNotNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseNotExpression *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTBitwiseNotNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTFunctionNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTValueReferenceNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTLongConstNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTFloatConstNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTStringConstNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTNullNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTTrueNode *node, void * data) {
    defaultVisit(node, data);
  }
  virtual void  visit(const ASTFalseNode *node, void * data) {
    defaultVisit(node, data);
  }
  public: ~ExpressionParserDefaultVisitor() { }
};
#endif
/* JavaCC - OriginalChecksum=0eac95fb6285ea62ea7829f33438880f (do not edit this line) */
